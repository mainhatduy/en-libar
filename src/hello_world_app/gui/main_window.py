"""
Main window GUI cho Hello World App
"""

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

from ..core.config import AppConfig
from ..utils.helpers import format_system_info, log_message

class MainWindow:
    """Qu·∫£n l√Ω c·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self, app_instance):
        self.app = app_instance
        self.window = None
        self.setup_ui()
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        self.window = Gtk.Window()
        self.window.set_title(AppConfig.WINDOW_TITLE)
        self.window.set_default_size(
            AppConfig.WINDOW_DEFAULT_WIDTH, 
            AppConfig.WINDOW_DEFAULT_HEIGHT
        )
        self.window.set_position(Gtk.WindowPosition.CENTER)
        
        # T·∫°o layout ch√≠nh
        vbox = self._create_main_layout()
        self.window.add(vbox)
        
        # K·∫øt n·ªëi signal handlers
        self.window.connect("delete-event", self._on_window_delete)
    
    def _create_main_layout(self) -> Gtk.VBox:
        """T·∫°o layout ch√≠nh c·ªßa c·ª≠a s·ªï"""
        vbox = Gtk.VBox(spacing=20)
        vbox.set_margin_left(20)
        vbox.set_margin_right(20)
        vbox.set_margin_top(20)
        vbox.set_margin_bottom(20)
        
        # Th√™m c√°c widget
        vbox.pack_start(self._create_hello_label(), True, True, 0)
        vbox.pack_start(self._create_info_label(), True, True, 0)
        vbox.pack_start(self._create_hotkey_info_label(), False, False, 0)
        vbox.pack_start(self._create_hide_button(), False, False, 0)
        vbox.pack_start(self._create_quit_button(), False, False, 0)
        
        return vbox
    
    def _create_hello_label(self) -> Gtk.Label:
        """T·∫°o label ch√†o m·ª´ng ch√≠nh"""
        label = Gtk.Label()
        label.set_markup('<span size="xx-large" weight="bold">Hello World!</span>')
        label.set_halign(Gtk.Align.CENTER)
        return label
    
    def _create_info_label(self) -> Gtk.Label:
        """T·∫°o label th√¥ng tin h·ªá th·ªëng"""
        label = Gtk.Label()
        label.set_markup(format_system_info())
        label.set_halign(Gtk.Align.CENTER)
        return label
    
    def _create_hotkey_info_label(self) -> Gtk.Label:
        """T·∫°o label th√¥ng tin v·ªÅ hotkey"""
        label = Gtk.Label()
        label.set_markup('<span style="italic" color="blue">üí° S·ª≠ d·ª•ng Super+T ƒë·ªÉ hi·ªÉn th·ªã c·ª≠a s·ªï t·ª´ b·∫•t k·ª≥ ƒë√¢u</span>')
        label.set_halign(Gtk.Align.CENTER)
        return label
    
    def _create_hide_button(self) -> Gtk.Button:
        """T·∫°o n√∫t ·∫©n xu·ªëng system tray"""
        button = Gtk.Button(label="·∫®n xu·ªëng System Tray")
        button.connect("clicked", self._on_hide_clicked)
        return button
    
    def _create_quit_button(self) -> Gtk.Button:
        """T·∫°o n√∫t tho√°t ·ª©ng d·ª•ng"""
        button = Gtk.Button(label="Tho√°t ·ª©ng d·ª•ng")
        button.connect("clicked", self._on_quit_clicked)
        return button
    
    def _on_hide_clicked(self, widget):
        """X·ª≠ l√Ω khi click n√∫t ·∫©n"""
        self.hide()
    
    def _on_quit_clicked(self, widget):
        """X·ª≠ l√Ω khi click n√∫t tho√°t"""
        self.app.quit()
    
    def _on_window_delete(self, widget, event):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        self.hide()
        return True  # NgƒÉn destroy window
    
    def show(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï"""
        if self.window:
            self.window.show_all()
            self.window.present()
            log_message("Hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh")
    
    def hide(self):
        """·∫®n c·ª≠a s·ªï"""
        if self.window:
            self.window.hide()
            log_message("·∫®n c·ª≠a s·ªï xu·ªëng system tray")
    
    def destroy(self):
        """H·ªßy c·ª≠a s·ªï"""
        if self.window:
            self.window.destroy()
            log_message("ƒê√≥ng c·ª≠a s·ªï ch√≠nh") 